require('dotenv').config();
const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder } = require('discord.js');
const OpenAI = require('openai');

// ÂàùÂßãÂåñ Discord client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// ÂàùÂßãÂåñ OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ÂÑ≤Â≠òÂ∞çË©±Ê≠∑Âè≤ (Á∞°ÂñÆÁâàÊú¨,ÂØ¶ÈöõÊáâË©≤Áî®Ë≥áÊñôÂ∫´)
const conversationHistory = new Map();

// ÂÑ≤Â≠òÊØèÂÄã channel ÊúÄÂæå‰∏ÄÊ¨°‰ΩøÁî® /make-stories ÁöÑË®äÊÅØ ID
const lastStoriesCommandMessage = new Map();

// ÂÆöÁæ© slash commands
const commands = [
  new SlashCommandBuilder()
    .setName('ask')
    .setDescription('Ask ChatGPT a question')
    .addStringOption(option =>
      option
        .setName('question')
        .setDescription('Your question for ChatGPT')
        .setRequired(true)
    ),
  new SlashCommandBuilder()
    .setName('clear')
    .setDescription('Clear conversation history in this channel'),
  new SlashCommandBuilder()
    .setName('make-stories')
    .setDescription('Â∞áÈ†ªÈÅìÂ∞çË©±ÊãÜËß£Êàê user stories'),
];

// Ë®ªÂÜä slash commands
async function registerCommands() {
  const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
  
  try {
    console.log('Started refreshing application (/) commands.');
    
    await rest.put(
      Routes.applicationCommands(client.user.id),
      { body: commands },
    );
    
    console.log('Successfully reloaded application (/) commands.');
  } catch (error) {
    console.error('Error registering commands:', error);
  }
}

// Bot Ê∫ñÂÇôÂ•ΩÊôÇ
client.once('ready', async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  await registerCommands();
});

// ËôïÁêÜ slash commands
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  const { commandName, channelId } = interaction;

  if (commandName === 'ask') {
    const question = interaction.options.getString('question');
    
    // Âª∂ÈÅ≤ÂõûÊáâ,Âõ†ÁÇ∫ OpenAI API ÂèØËÉΩÈúÄË¶ÅÊôÇÈñì
    await interaction.deferReply();

    try {
      // ÂèñÂæóÊàñÂª∫Á´ãÂ∞çË©±Ê≠∑Âè≤
      if (!conversationHistory.has(channelId)) {
        conversationHistory.set(channelId, []);
      }
      
      const history = conversationHistory.get(channelId);
      
      // Âä†ÂÖ•‰ΩøÁî®ËÄÖÁöÑÂïèÈ°å
      history.push({
        role: 'user',
        content: question,
      });

      // ÂëºÂè´ OpenAI API
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo', // Êàñ‰ΩøÁî® 'gpt-3.5-turbo' ‰æÜÁØÄÁúÅÊàêÊú¨
        messages: history,
        max_tokens: 2000,
        temperature: 0.7,
      });

      const gptResponse = response.choices[0].message.content;

      // ÂÑ≤Â≠ò GPT ÁöÑÂõûÊáâÂà∞Ê≠∑Âè≤
      history.push({
        role: 'assistant',
        content: gptResponse,
      });

      // Â¶ÇÊûúÂõûÊáâÂ§™Èï∑,ÂàÜÊÆµÁôºÈÄÅ
      if (gptResponse.length > 2000) {
        await interaction.editReply(gptResponse.substring(0, 2000));
        
        // Âú® thread ‰∏≠ÁπºÁ∫åÂõûÊáâ
        const thread = await interaction.channel.threads.create({
          name: `Response to: ${question.substring(0, 50)}...`,
          autoArchiveDuration: 60,
        });
        
        let remaining = gptResponse.substring(2000);
        while (remaining.length > 0) {
          await thread.send(remaining.substring(0, 2000));
          remaining = remaining.substring(2000);
        }
      } else {
        await interaction.editReply(gptResponse);
      }

    } catch (error) {
      console.error('Error calling OpenAI API:', error);
      await interaction.editReply('‚ùå Sorry, there was an error processing your request.');
    }
  }

  if (commandName === 'clear') {
    conversationHistory.delete(channelId);
    await interaction.reply('‚úÖ Conversation history cleared for this channel.');
  }

  if (commandName === 'make-stories') {
    // Âª∂ÈÅ≤ÂõûÊáâ
    await interaction.deferReply();

    try {
      // ÂèñÂæóÈ†ªÈÅìË®äÊÅØ
      let messages = [];
      let fetchOptions = { limit: 100 };

      // Â¶ÇÊûúÊúâ‰∏äÊ¨°ÁöÑ /make-stories Êåá‰ª§Ë®òÈåÑÔºåÂè™ËÆÄÂèñ‰πãÂæåÁöÑË®äÊÅØ
      if (lastStoriesCommandMessage.has(channelId)) {
        fetchOptions.after = lastStoriesCommandMessage.get(channelId);
      }

      const fetchedMessages = await interaction.channel.messages.fetch(fetchOptions);

      // Â∞áË®äÊÅØËΩâÊèõÁÇ∫Èô£Âàó‰∏¶ÂèçËΩâÈ†ÜÂ∫èÔºàÂæûËàäÂà∞Êñ∞Ôºâ
      messages = Array.from(fetchedMessages.values())
        .reverse()
        .filter(msg => !msg.author.bot) // ÊéíÈô§ bot Ë®äÊÅØ
        .map(msg => `${msg.author.username}: ${msg.content}`);

      if (messages.length === 0) {
        await interaction.editReply('üìù Ê≤íÊúâÊâæÂà∞Êñ∞ÁöÑÂ∞çË©±ÂÖßÂÆπ‰æÜÁîüÊàê stories„ÄÇ');
        return;
      }

      // ÁµÑÂêàÂ∞çË©±ÂÖßÂÆπ
      const conversationContext = messages.join('\n');

      // ÂëºÂè´ OpenAI API ÁîüÊàê stories
      const response = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `‰Ω†ÊòØ‰∏ÄÂÄãÊïèÊç∑ÈñãÁôºÂ∞àÂÆ∂ÔºåÊìÖÈï∑Â∞áÂ∞çË©±ÈúÄÊ±ÇÊãÜËß£ÊàêÁµêÊßãÂåñÁöÑ user stories„ÄÇ

Ë´ãÂàÜÊûê‰ª•‰∏ãÂ∞çË©±ÔºåÊèêÂèñÂá∫ÊâÄÊúâÁöÑÈúÄÊ±ÇÔºå‰∏¶Â∞áÂÆÉÂÄëËΩâÊèõÊàêÊ®ôÊ∫ñÁöÑ user stories Ê†ºÂºèÔºö

**User Story Ê†ºÂºèÔºö**
### Story [Á∑®Ëôü]: [Á∞°Áü≠Ê®ôÈ°å]
**As a** [ËßíËâ≤]
**I want** [ÂäüËÉΩ/ÈúÄÊ±Ç]
**So that** [ÂÉπÂÄº/ÁõÆÁöÑ]

**Acceptance Criteria:**
- [ ] [È©óÊî∂Ê¢ù‰ª∂1]
- [ ] [È©óÊî∂Ê¢ù‰ª∂2]
- [ ] [È©óÊî∂Ê¢ù‰ª∂3]

**Technical Notes:**
- [ÊäÄË°ìËÄÉÈáèÊàñÂØ¶‰ΩúÊèêÁ§∫]

---

Ë´ãÁ¢∫‰øùÔºö
1. ÊØèÂÄã story ÈÉΩÊòØÁç®Á´ã‰∏îÂèØÊ∏¨Ë©¶ÁöÑ
2. ÂåÖÂê´Ê∏ÖÊ•öÁöÑÈ©óÊî∂Ê¢ù‰ª∂
3. ÊåâÂÑ™ÂÖàÁ¥öÊàñÈÇèËºØÈ†ÜÂ∫èÊéíÂàó
4. Â¶ÇÊûúÈúÄÊ±ÇÊ®°Á≥äÔºåÂú® Technical Notes ‰∏≠Ë®ªÊòéÈúÄË¶ÅÊæÑÊ∏ÖÁöÑÂú∞Êñπ`
          },
          {
            role: 'user',
            content: `Ë´ãÂàÜÊûê‰ª•‰∏ãÂ∞çË©±‰∏¶ÁîüÊàê user storiesÔºö\n\n${conversationContext}`
          }
        ],
        temperature: 0.7,
        max_tokens: 3000,
      });

      const storiesContent = response.choices[0].message.content;

      // ÂÑ≤Â≠òÈÄôÊ¨°Êåá‰ª§ÁöÑË®äÊÅØ IDÔºàÁî®Êñº‰∏ãÊ¨°ËÆÄÂèñÔºâ
      const replyMessage = await interaction.fetchReply();
      lastStoriesCommandMessage.set(channelId, replyMessage.id);

      // Â¶ÇÊûúÂõûÊáâÂ§™Èï∑ÔºåÂàÜÊÆµÁôºÈÄÅÊàñÂª∫Á´ã thread
      if (storiesContent.length > 2000) {
        // ÂÖàÁôºÈÄÅÊëòË¶Å
        await interaction.editReply('üìö **User Stories ÁîüÊàêÂÆåÊàêÔºÅ**\n\nÂÖßÂÆπËºÉÈï∑ÔºåÂ∑≤Âª∫Á´ã thread È°ØÁ§∫ÂÆåÊï¥ÁµêÊûú...');

        // Âª∫Á´ã thread
        const thread = await interaction.channel.threads.create({
          name: `User Stories - ${new Date().toLocaleDateString()}`,
          autoArchiveDuration: 1440, // 24Â∞èÊôÇ
        });

        // Âú® thread ‰∏≠ÂàÜÊÆµÁôºÈÄÅ
        let remaining = storiesContent;
        while (remaining.length > 0) {
          await thread.send(remaining.substring(0, 2000));
          remaining = remaining.substring(2000);
        }

        await thread.send('\n---\nüí° **ÊèêÁ§∫**: ‰ΩøÁî® `/make-stories` ÂèØ‰ª•ÁπºÁ∫åÂàÜÊûêÊñ∞ÁöÑÂ∞çË©±ÂÖßÂÆπ„ÄÇ');
      } else {
        await interaction.editReply(`üìö **User Stories ÁîüÊàêÂÆåÊàêÔºÅ**\n\n${storiesContent}\n\n---\nüí° **ÊèêÁ§∫**: ‰ΩøÁî® \`/make-stories\` ÂèØ‰ª•ÁπºÁ∫åÂàÜÊûêÊñ∞ÁöÑÂ∞çË©±ÂÖßÂÆπ„ÄÇ`);
      }

    } catch (error) {
      console.error('Error generating stories:', error);
      await interaction.editReply('‚ùå Êä±Ê≠âÔºåÁîüÊàê stories ÊôÇÁôºÁîüÈåØË™§„ÄÇ');
    }
  }
});

// Âú® thread ‰∏≠ÁöÑÂ∞çË©±
client.on('messageCreate', async (message) => {
  // ÂøΩÁï• bot Ëá™Â∑±ÁöÑË®äÊÅØ
  if (message.author.bot) return;
  
  // Âè™ËôïÁêÜ thread ‰∏≠ÁöÑË®äÊÅØ
  if (!message.channel.isThread()) return;
  
  // Ê™¢Êü• thread ÊòØÂê¶Áî± vibebot Âª∫Á´ã
  const starterMessage = await message.channel.fetchStarterMessage();
  if (starterMessage?.author.id !== client.user.id) return;

  try {
    // È°ØÁ§∫Ê≠£Âú®Ëº∏ÂÖ•...
    await message.channel.sendTyping();

    const threadId = message.channel.id;
    
    // ÂèñÂæóÊàñÂª∫Á´ãÂ∞çË©±Ê≠∑Âè≤
    if (!conversationHistory.has(threadId)) {
      conversationHistory.set(threadId, []);
    }
    
    const history = conversationHistory.get(threadId);
    
    // Âä†ÂÖ•‰ΩøÁî®ËÄÖÁöÑË®äÊÅØ
    history.push({
      role: 'user',
      content: message.content,
    });

    // ÂëºÂè´ OpenAI API
    const response = await openai.chat.completions.create({
      model: 'gpt-4o', // Êàñ‰ΩøÁî® 'gpt-3.5-turbo'
      messages: history,
      max_tokens: 2000,
      temperature: 0.7,
    });

    const gptResponse = response.choices[0].message.content;

    // ÂÑ≤Â≠òÂõûÊáâ
    history.push({
      role: 'assistant',
      content: gptResponse,
    });

    // ÁôºÈÄÅÂõûÊáâ
    if (gptResponse.length > 2000) {
      let remaining = gptResponse;
      while (remaining.length > 0) {
        await message.reply(remaining.substring(0, 2000));
        remaining = remaining.substring(2000);
      }
    } else {
      await message.reply(gptResponse);
    }

  } catch (error) {
    console.error('Error in thread conversation:', error);
    await message.reply('‚ùå Sorry, there was an error processing your message.');
  }
});

// ÁôªÂÖ• Discord
client.login(process.env.DISCORD_TOKEN);